#!/usr/bin/python

import requests
import os
import sys
import time
from datetime import datetime, timedelta
from pprint import pprint as pp

from local_settings import REDMINE_USER, REDMINE_PASSWORD

USERS = {
    'jo': 5,
    'ben': 6,
    'andre': 30
}

USER_ID = USERS['andre']
USER = REDMINE_USER
PASSWD = REDMINE_PASSWORD
DATE_FORMAT = '%Y-%m-%d'


if len(sys.argv) > 1:
    USER_ID = USERS.get(sys.argv[1], USERS['andre'])

def get_first_day_of_week(now):
    date_str = '%s %s 1' % (now.year, now.strftime('%W'))
    return datetime.strptime(date_str, '%Y %W %w').strftime(DATE_FORMAT)

def get_last_day_of_week(now):
    date_str = '%s %s 0' % (now.year, now.strftime('%W'))
    return datetime.strptime(date_str, '%Y %W %w').strftime(DATE_FORMAT)

def main():
    url = 'http://%s:%s@redmine.caravan.coop' % (USER, PASSWD)
    now = datetime.now()
    today = now.strftime(DATE_FORMAT)
    start_week_date = get_first_day_of_week(now)
    end_week_date = get_last_day_of_week(now)
    start_month_date = datetime(year=now.year, month=now.month, day=1).strftime(DATE_FORMAT)

    today_total = 0
    week_total = 0
    super_total = 0

    print "Seeing report to id %s " % USER_ID

    project_url = '%s/projects.json?user_id=%s&limit=100' % (url, USER_ID)
    response = requests.get(project_url, verify=False)
    projects = response.json()['projects']

    for project in projects:
        if 'parent' in project:
            # print "Skiping %s..." % project['name']
            continue

        print "Project: %s" % project['name']

        data = {
            'url': url,
            'spent_on' : '%3E%3D'+start_month_date,
            'user_id': USER_ID,
            'project_id': project['id']
        }

        time_url = ("{url}/time_entries.json?spent_on={spent_on}"
                    "&user_id={user_id}&project_id={project_id}&"
                    "limit=100".format(**data))

        response = requests.get(time_url, verify=False)
    
        entries = response.json()['time_entries']
        total = 0

        for entry in entries:
            total += entry['hours']
            super_total += entry['hours']

            if entry['spent_on'] >= start_week_date and entry['spent_on'] <= end_week_date:
                week_total += entry['hours']

            if entry['spent_on'] == today:
                today_total += entry['hours']

        print "Hours: %s" % total

    print ""
    print "Total hours for today: %s (%s)" % (today_total, today)
    print "Total hours for the week: %s (%s - %s)" % (week_total, start_week_date, end_week_date)
    print "Total hours for the month: %s (%s)" % (super_total, start_month_date)

    print ""
    total_before_taxes = super_total * 45
    print "Total before taxes: %s" % total_before_taxes
    total_after_taxes = total_before_taxes - (total_before_taxes * 0.35)
    print "Total after taxes %s" % total_after_taxes



def neo_main():
    url = 'http://%s:%s@redmine.caravan.coop' % (USER, PASSWD)
    now = datetime.now()
    start_month_date = datetime(year=now.year, month=now.month, day=1).strftime(DATE_FORMAT)
    time_url = '%s/time_entries.json?spent_on=%s&user_id=me' % (url, '%3E%3D'+start_month_date)



if __name__ == '__main__':
    main()
    # neo_main()
