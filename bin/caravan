#!/usr/bin/python

try:
    from local_settings import REDMINE_USER, REDMINE_PASSWORD
except ImportError:
    print "local_settings is missing..."
    exit()

try:
    from redmine import Redmine
except ImportError:
    print "pyredmine isn't installed"
    print "pls, do: `pip install pyredmine`"
    exit()

import sys
from urllib2 import HTTPError
from datetime import datetime

def p( *args ):
    print " ".join( [ unicode(i) for i in args ] )

def get_first_day_of_week(now):
    date_str = '%s %s 1' % (now.year, now.strftime('%W'))
    return datetime.strptime(date_str, '%Y %W %w').strftime(DATE_FORMAT)

def get_last_day_of_week(now):
    date_str = '%s %s 0' % (now.year, now.strftime('%W'))
    return datetime.strptime(date_str, '%Y %W %w').strftime(DATE_FORMAT)

def is_current_week(date):
    return date.strftime(DATE_FORMAT) > FIRST_DAY_OF_WEEK and date.strftime(DATE_FORMAT) < LAST_DAY_OF_WEEK

def is_today(date):
    return date.year == NOW.year and date.month == NOW.month and date.day == NOW.day


NOW = datetime.now()
DATE_FORMAT = '%Y-%m-%d'
START_MONTH_DATE = datetime(year=NOW.year, month=NOW.month, day=1).strftime(DATE_FORMAT)
FIRST_DAY_OF_WEEK = get_first_day_of_week(NOW)
LAST_DAY_OF_WEEK = get_last_day_of_week(NOW)


red = Redmine('http://redmine.caravan.coop', username=REDMINE_USER, password=REDMINE_PASSWORD)

def _by_projects():
    today_total = 0
    week_total = 0
    super_total = 0

    p('Loading projects...')
    for i in xrange(1, 100):
        try:
            project = red.projects[i]
        except HTTPError:
            continue
        except KeyError:
            break

        if project.parent:
            continue

        entries = project.time_entries(user_id=red.user.id, spent_on='>='+START_MONTH_DATE)
        project_today_total = 0
        project_week_total = 0
        project_total = 0
        for entry in entries:
            project_total += entry.hours
            super_total += entry.hours

            if is_current_week(entry.spent_on):
                project_week_total += entry.hours
                week_total += entry.hours

            if is_today(entry.spent_on):
                project_today_total += entry.hours
                today_total += entry.hours

        if project_total > 0:
            print ""
            p("Project:", project.name)
            p("Hours today: %s; week: %s; total: %s" % (project_today_total, project_week_total, project_total))

    return {
        'today': today_total,
        'week': week_total,
        'total': super_total
    }


def _by_time_entries():
    today_total = 0
    week_total = 0
    super_total = 0

    p('Loading entries...')
    entries = red.time_entries(user_id=red.user.id, spent_on='>='+START_MONTH_DATE)
    for entry in entries:
        super_total += entry.hours

        if is_current_week(entry.spent_on):
            week_total += entry.hours

        if is_today(entry.spent_on):
            today_total += entry.hours

    return {
        'today': today_total,
        'week': week_total,
        'total': super_total
    }


def main(by_what):
    if by_what in ['project', 'projects', 'p']:
        result = _by_projects()
    else:
        result = _by_time_entries()

    print ""
    print "Total hours for today: %s (%s)" % (result['today'], NOW.strftime(DATE_FORMAT))
    print "Total hours for the week: %s (%s - %s)" % (result['week'], FIRST_DAY_OF_WEEK, LAST_DAY_OF_WEEK)
    print "Total hours for the month: %s (%s)" % (result['total'], START_MONTH_DATE)

    print ""
    total_before_taxes = result['total'] * 45
    print "Total before taxes: %s" % total_before_taxes
    total_after_taxes = total_before_taxes - (total_before_taxes * 0.35)
    print "Total after taxes %s" % total_after_taxes


if __name__ == '__main__':
    try:
        by_what = sys.argv[1]
    except IndexError:
        by_what = 'entries'

    main(by_what)
